/**
  ******************************************************************************
  * @file    usbh_usr.c
  * @author  MCD Application Team
  * @version V2.1.0
  * @date    19-March-2012
  * @brief   This file includes the usb host library user callbacks
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include <string.h>
#include "usbh_usr.h"
#include "ff.h"
#include "usbh_msc_core.h"
#include "usbh_msc_scsi.h"
#include "usbh_msc_bot.h"
#include "..\include\led.h"
#include "..\include\usart.h"

/** @addtogroup USBH_USER
* @{
*/

/** @addtogroup USBH_MSC_DEMO_USER_CALLBACKS
* @{
*/

/** @defgroup USBH_USR 
* @brief    This file includes the usb host stack user callbacks
* @{
*/ 

/** @defgroup USBH_USR_Private_TypesDefinitions
* @{
*/ 
/**
* @}
*/ 


/** @defgroup USBH_USR_Private_Defines
* @{
*/ 
/**
* @}
*/ 


/** @defgroup USBH_USR_Private_Macros
* @{
*/ 
extern USB_OTG_CORE_HANDLE          USB_OTG_Core;
/**
* @}
*/ 


/** @defgroup USBH_USR_Private_Variables
* @{
*/ 
unsigned char USBH_USR_ApplicationState = USH_USR_HS_INIT;
FATFS fatfs;
FIL file; 

/*  Points to the DEVICE_PROP structure of current device */
/*  The purpose of this register is to speed up the execution */

USBH_Usr_cb_TypeDef USR_cb =
{
  USBH_USR_Init,
  USBH_USR_DeInit,
  USBH_USR_DeviceAttached,
  USBH_USR_ResetDevice,
  USBH_USR_DeviceDisconnected,
  USBH_USR_OverCurrentDetected,
  USBH_USR_DeviceSpeedDetected,
  USBH_USR_Device_DescAvailable,
  USBH_USR_DeviceAddressAssigned,
  USBH_USR_Configuration_DescAvailable,
  USBH_USR_Manufacturer_String,
  USBH_USR_Product_String,
  USBH_USR_SerialNum_String,
  USBH_USR_EnumerationDone,
  USBH_USR_UserInput,
  USBH_USR_MSC_Application,
  USBH_USR_DeviceNotSupported,
  USBH_USR_UnrecoveredError
    
};

/**
* @}
*/


/** @defgroup USBH_USR_Private_Functions
* @{
*/ 

/**
* @brief  USBH_USR_Init 
*         Displays the message on LCD for host lib initialization
* @param  None
* @retval None
*/
void USBH_USR_Init(void)
{    
   usart4.printf(" USB OTG HS MSC Host\r\n");
   usart4.printf(" USB Host Library v2.1.0\r\n");
}

/**
* @brief  USBH_USR_DeviceAttached 
*         Displays the message on LCD on device attached
* @param  None
* @retval None
*/
void USBH_USR_DeviceAttached(void)
{
	usart4.printf(" Device Attached\r\n");
}


/**
* @brief  USBH_USR_UnrecoveredError
* @param  None
* @retval None
*/
void USBH_USR_UnrecoveredError (void)
{
  usart4.printf(" UNRECOVERED ERROR STATE\r\n");
}


/**
* @brief  USBH_DisconnectEvent
*         Device disconnect event
* @param  None
* @retval Staus
*/
void USBH_USR_DeviceDisconnected (void)
{
	usart4.printf(" Device Disconnected\r\n");
}
/**
* @brief  USBH_USR_ResetUSBDevice 
* @param  None
* @retval None
*/
void USBH_USR_ResetDevice(void)
{
}


/**
* @brief  USBH_USR_DeviceSpeedDetected 
*         Displays the message on LCD for device speed
* @param  Device speed
* @retval None
*/
void USBH_USR_DeviceSpeedDetected(uint8_t DeviceSpeed)
{
}

/**
* @brief  USBH_USR_Device_DescAvailable 
*         Displays the message on LCD for device descriptor
* @param  device descriptor
* @retval None
*/
void USBH_USR_Device_DescAvailable(void *DeviceDesc)
{ 
  USBH_DevDesc_TypeDef *hs;
  hs = DeviceDesc;  

  usart4.printf(" VID : %04Xh\r\n" , (uint32_t)(*hs).idVendor); 
  usart4.printf(" PID : %04Xh\r\n" , (uint32_t)(*hs).idProduct); 
}

/**
* @brief  USBH_USR_DeviceAddressAssigned 
*         USB device is successfully assigned the Address 
* @param  None
* @retval None
*/
void USBH_USR_DeviceAddressAssigned(void)
{
  
}


/**
* @brief  USBH_USR_Conf_Desc 
*         Displays the message on LCD for configuration descriptor
* @param  Configuration descriptor
* @retval None
*/
void USBH_USR_Configuration_DescAvailable(USBH_CfgDesc_TypeDef * cfgDesc,
                                          USBH_InterfaceDesc_TypeDef *itfDesc,
                                          USBH_EpDesc_TypeDef *epDesc)
{
  USBH_InterfaceDesc_TypeDef *id;
  
  id = itfDesc;  
  
  if((*id).bInterfaceClass  == 0x08)
  {
    usart4.printf(" Mass storage device connected\r\n");
  }
  else if((*id).bInterfaceClass  == 0x03)
  {
    usart4.printf(" HID device connected\r\n");
  }    
}

/**
* @brief  USBH_USR_Manufacturer_String 
*         Displays the message on LCD for Manufacturer String 
* @param  Manufacturer String 
* @retval None
*/
void USBH_USR_Manufacturer_String(void *ManufacturerString)
{
  usart4.printf(" Manufacturer : %s\r\n", (char *)ManufacturerString);
}

/**
* @brief  USBH_USR_Product_String 
*         Displays the message on LCD for Product String
* @param  Product String
* @retval None
*/
void USBH_USR_Product_String(void *ProductString)
{
  usart4.printf(" Product : %s\r\n", (char *)ProductString);  
}

/**
* @brief  USBH_USR_SerialNum_String 
*         Displays the message on LCD for SerialNum_String 
* @param  SerialNum_String 
* @retval None
*/
void USBH_USR_SerialNum_String(void *SerialNumString)
{
  usart4.printf(" Serial Number : %s\r\n", (char *)SerialNumString);    
} 



/**
* @brief  EnumerationDone 
*         User response request is displayed to ask application jump to class
* @param  None
* @retval None
*/
void USBH_USR_EnumerationDone(void)
{
} 


/**
* @brief  USBH_USR_DeviceNotSupported
*         Device is not supported
* @param  None
* @retval None
*/
void USBH_USR_DeviceNotSupported(void)
{
  usart4.printf(" Device not supported\r\n"); 
}  


/**
* @brief  USBH_USR_UserInput
*         User Action for application state entry
* @param  None
* @retval USBH_USR_Status : User response for key button
*/
USBH_USR_Status USBH_USR_UserInput(void)
{
  USBH_USR_Status usbh_usr_status;
   
  usbh_usr_status = USBH_USR_RESP_OK;

  return usbh_usr_status;
}  

/**
* @brief  USBH_USR_OverCurrentDetected
*         Over Current Detected on VBUS
* @param  None
* @retval Staus
*/
void USBH_USR_OverCurrentDetected (void)
{
  usart4.printf(" Overcurrent detected\r\n");
}


/**
* @brief  USBH_USR_MSC_Application 
*         Demo application for mass storage
* @param  None
* @retval Staus
*/
int USBH_USR_MSC_Application(void)
{
	int i,j;
  static FRESULT res;
  unsigned char write_buffer[512];
	unsigned char read_buffer[512];
  unsigned int counter;
	
  switch (USBH_USR_ApplicationState)
  {
    case USH_USR_HS_INIT://初始化文件系统 
      if (f_mount( 0, &fatfs ) != FR_OK ) 
      {
        usart4.printf("\r\n\r\n f_mount error!\r\n");
        return(-1);
      }else{
				usart4.printf("\r\n\r\n f_mount successful!\r\n");
			}				
      //判断U盘是否写保护
      if (USBH_MSC_Param.MSWriteProtect == DISK_WRITE_PROTECTED)
      {
				usart4.printf(" U disk is protect!\r\n");
        while(1)
        {
					for(i = 0;i < 10000000;i++);
					LED_RED_ON;
					for(i = 0;i < 10000000;i++);
					LED_RED_OFF;
        }
      }
		
      //跳转到测试程序
      USBH_USR_ApplicationState = USH_USR_HS_TEST;
      break;
		
		case USH_USR_HS_TEST:
			USB_OTG_BSP_mDelay(10);
			
			for(i = 0; i < 512 ; i ++)write_buffer[i] = i % 256;
		
			res = f_open(&file,"0:/test.txt",FA_READ | FA_WRITE | FA_OPEN_ALWAYS);   //打开驱动器0上的源文件
			if(res != FR_OK){
				usart4.printf(" f_open error!\r\n");
				while(1){
					for(i = 0;i < 10000000;i++);
					LED_RED_ON;
					for(i = 0;i < 10000000;i++);
					LED_RED_OFF;
				}		
			}else{
				usart4.printf(" f_open successful!\r\n");
			}
			
			res = f_lseek(&file,0);                                                  //移动写指针到文件首
			if(res != FR_OK){
				usart4.printf(" f_lseek error!\r\n");
				while(1){
					for(i = 0;i < 10000000;i++);
					LED_RED_ON;
					for(i = 0;i < 10000000;i++);
					LED_RED_OFF;
				}				
			}else{
				usart4.printf(" f_lseek successful!\r\n");
			}
			
			for(i = 0;i < 512;i++){
				write_buffer[i] = i % 256;
			}
			res = f_write(&file,write_buffer,512,&counter);                          //将缓冲器中的内容写入源文件
			if(res != FR_OK || counter != 512){
				usart4.printf(" f_write error!\r\n");
				while(1){
					for(i = 0;i < 10000000;i++);
					LED_RED_ON;
					for(i = 0;i < 10000000;i++);
					LED_RED_OFF;
				}	
			}else{
				usart4.printf(" f_write successful!\r\n");	
			}
			
			res = f_lseek(&file,0);	                                                 //移动读指针到文件首
			if(res != FR_OK){
				usart4.printf(" f_lseek error!\r\n");
				while(1){
					for(i = 0;i < 10000000;i++);
					LED_RED_ON;
					for(i = 0;i < 10000000;i++);
					LED_RED_OFF;
				}				
			}else{
				usart4.printf(" f_lseek successful!\r\n");
			}
			
			res = f_read(&file,read_buffer,512,&counter);                           //将源文件中的内容读取到缓冲区
			if(res != FR_OK || counter != 512){
				usart4.printf(" f_read error!\r\n");
				while(1){
					for(i = 0;i < 10000000;i++);
					LED_RED_ON;
					for(i = 0;i < 10000000;i++);
					LED_RED_OFF;
				}	
			}else{
				usart4.printf(" f_read successful!\r\n");
			}
			f_close(&file); 
			f_mount(0, NULL); 
			
			usart4.printf("\r\n\r\n read data:\r\n");
			for(i = 0;i < 32;i++){
				for(j = 0; j < 16; j ++)
					usart4.printf(" %02X",read_buffer[i*16+j]);
					usart4.printf("\r\n");
			}
			
			USBH_USR_ApplicationState = USH_USR_HS_DONE; 
			break;
			
    case USH_USR_HS_DONE:
      break;
	
    default:
      break;
  }
  return(0);
}
/**
* @brief  USBH_USR_DeInit
*         Deint User state and associated variables
* @param  None
* @retval None
*/
void USBH_USR_DeInit(void)
{
  USBH_USR_ApplicationState = USH_USR_HS_INIT;
}


/**
* @}
*/ 

/**
* @}
*/ 

/**
* @}
*/

/**
* @}
*/

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

